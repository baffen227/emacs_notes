

================================================================================

* Exploring Emacs

Let’s explore VC, Emacs’s Version Control interface.

If you weren’t aware of VC before and your first introduction to it
is reading about it now, how would you learn about it?

** Reading the Manual (C-h i)
1. Open the M-x info manual by typing C-h i.
2. Navigate to the Emacs hyperlink and open it.
3. Search with C-s for version or version control.

So, reading the manual works well — but not every feature has a
manual. And perhaps the chapters are buried in a subsub- sub-chapter
out of easy reach. And third-party packages almost never ship with
info manuals.

Apropos for info manuals 
You can use the command M-x info-apropos with a search pattern and
Emacs will crawl all known info manual pages looking for matching
patterns. If you are unsure of where something is, this command is a
powerful tool.

** Using Apropos (C-h d) (C-h a)
To do this, use C-h d, which is the apropos command that searches
documentation.

Knowing that VC's prefix is vc-, we can use M-x apropos-command,
bound to C-h a, to find all the VC commands:
M-x apropos-command RET

The next step would be to see what commands are bound to the prefix
key itself by appending C-h.

** C-h: Exploring Prefix keys
EX: C-x v C-h

** C-h k: Describe what a key does
The slight downside of C-h k is that its intended audience are elisp
hackers and not end users;

C-h f: Describing commands

** C-h m: Finding mode commands
C-h m, a help command that describes a mode.


================================================================================

* Working with Log Files

| Keys                      | Description                          |
|---------------------------+--------------------------------------|
| C-x C-f                   | Finds a file                         |
| C-x C-r                   | Finds a file in read only mode       |
| C-x C-q                   | Toggles read only mode               |
| M-x flush-lines           | Flushes lines matching a pattern     |
| M-x keep-lines            | Keeps only lines matching a pattern  |
| M-s o (Occur mode)        | List lines matching a pattern        |
| M-s h p                   | Highlights a phrase                  |
| M-s h r                   | Highlights a regular expression      |
| M-s h .                   | Highlights symbol at the point       |
| M-s h u                   | Removes highlighting under the point |
| M-x auto-revert-mode      | Reverts buffer when file changes     |
| M-x auto-revert-tail-mode | Appends changes when file changes    |

just know that they are all named highlight- and are thus easy to
execute, when you need them, with M-x.

You can enable a minor mode so Emacs refreshes a file if it changes on
your file system.


================================================================================

* TRAMP: Remote File Editing

Transparent Remote(file) Access, Multiple Protocol

All TRAMP connections follow this syntax:
/protocol:[user@]hostname[#port]:

For a full list of TRAMP protocols and how they work, consult the
variable tramp-methods or the info manual page (tramp) Internal
methods.

Another nifty feature of TRAMP is that it parses your ~/.ssh/config
file and suggests them when you have entered ssh as your protocol.

Finally, to actually invoke TRAMP you must call it from the
root – typing // in IDO mode will jump to the root – and
follow the format as above.

Note that Emacs will not initiate a remote connection until you enter
the second :, like so: 
/ssh:homer@powerplant:/var/log/reactor.log

The command above connects to the server powerplant using ssh as the
protocol and homer as the user.

The default directory
C-h v RET default-directory RET

There is no end to the things you can call remotely. Here are some of
the commands that I use remotely:
C-x d: Dired
M-x compile: Compile
M-x rgrep: Grep Commands
M-x shell: Emacs’s Shell Wrapper
M-x eshell: EShell, Emacs’s elisp shell

** Multi-Hops and User Switching
   refer to if needed


================================================================================

* Dired: Files and Directories

To access dired, you can do so in multiple ways:
1. From IDO mode
You can type C-d when finding files with C-x C-f to open a dired
buffer in that file’s current directory.
2. As a command
The command M-x dired opens a prompt that asks you for the dired
location to open.
3. As a key bind
The key binding C-x d works identically to the command above. The
command, C-x 4 d, does the same but in the other window.

** Navigation

| Keys           | Description                       |
|----------------+-----------------------------------|
| RET            | Visits the file or directory      |
| ^              | Goes up one directory             |
| q              | Quits dired                       |
| n, p, C-n, C-p | Moves the point up/down a listing |

** Marking and Unmarking

| Keys | Description        |
|------+--------------------|
| m    | Marks active       |
| u    | Unmarks active     |
| U    | Unmarks everything |
| d    | Flags for deletion |

| Keys   | Description              |
|--------+--------------------------|
| * m    | Marks region             |
| * u    | Unmarks region           |
| * %    | Marks files by regexp    |
| * .    | Marks files by extension |
| t, * t | Toggles marking          |
| * c    | Changes mark             |

** Operations

| Keys | Description                      |
|------+----------------------------------|
| g    | Refreshes dired buffer           |
| +    | Creates a sub-directory          |
| C    | Copy marked                      |
| R    | Renames/moves marked             |
| O    | chown marked                     |
| G    | chgrp marked                     |
| M    | chmod marked                     |
| D    | Deletes marked                   |
| x    | Deletes flagged                  |
| F    | Visits marked (requires dired-x) |

The key binding C-x d works identically to the command above. The
command, C-x 4 d, does the same but in the other window.

** Navigation

| Keys           | Description                       |
|----------------+-----------------------------------|
| RET            | Visits the file or directory      |
| ^              | Goes up one directory             |
| q              | Quits dired                       |
| n, p, C-n, C-p | Moves the point up/down a listing |

** Marking and Unmarking

| Keys | Description        |
|------+--------------------|
| m    | Marks active       |
| u    | Unmarks active     |
| U    | Unmarks everything |
| d    | Flags for deletion |

| Keys   | Description              |
|--------+--------------------------|
| * m    | Marks region             |
| * u    | Unmarks region           |
| * %    | Marks files by regexp    |
| * .    | Marks files by extension |
| t, * t | Toggles marking          |
| * c    | Changes mark             |

** Operations

| Keys  | Description                                   |
|-------+-----------------------------------------------|
| g     | Refreshes dired buffer                        |
| +     | Creates a sub-directory                       |
| C     | Copy marked                                   |
| R     | Renames/moves marked                          |
| O     | chown marked                                  |
| G     | chgrp marked                                  |
| M     | chmod marked                                  |
| D     | Deletes marked                                |
| x     | Deletes flagged                               |
| F     | Visits marked (requires dired-x)              |
| C-u F | Visits marked and open them in the background |

Add this to your init file for it to take effect:
(require 'dired-x)

| Keys      | Description                         |
|-----------+-------------------------------------|
| M-s a C-s | ISearches all marked files          |
| Q         | Query replace regexp marked files   |
| !         | Shell command on marked files       |
| &         | Async shell command on marked files |

** Working Across Directories

| Commands             | Description                         |
|----------------------+-------------------------------------|
| find-dired           | Calls find with a pattern           |
| find-name-dired      | Calls with -name                    |
| find-grep-dired      | Calls find and grep                 |
| find-lisp-find-dired | Uses Emacs and regexp to find files |


================================================================================

* Shell Commands

| Keys    | Description                           |
|---------+---------------------------------------|
| M-!     | Calls shell command and prints output |
| C-u M-! | As above, but inserts into buffer     |
| M-&     | Like M-! but asynchronous             |
| C-u M-& | Like C-u M-! but asynchronous         |

M-| ==> Pipes region to shell command
C-u M-| ==> Likes M-| but replaces region

Although M-& is asynchronous – that is, it won’t block Emacs until
it terminates – it is a rather poor choice for long-running
tasks. It’s far better to use M-x compile.

| Commands         | Description                          |
|------------------+--------------------------------------|
| M-x compile      | Runs a command, and tracks errors    |
| M-x recompile    | Re-runs last command                 |
| M-g M-n, M-g M-p | Jumps to next/previous error(global) |
| g                | Re-runs last command                 |



